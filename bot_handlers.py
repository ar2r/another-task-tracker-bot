from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from datetime import datetime, time, timedelta
import pytz
import logging
from models import User, Task
from time_utils import (
    parse_time_from_message, format_duration, should_auto_end_task,
    format_time_for_user, create_datetime_from_time
)
from task_parser import parse_task_message, format_task_for_display, get_unique_comments

logger = logging.getLogger(__name__)

# Keyboard markup
def get_main_keyboard():
    """Get main keyboard with buttons"""
    keyboard = [
        [KeyboardButton("–û—Ç–¥—ã—Ö"), KeyboardButton("–°–≤–æ–¥–∫–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user_id = update.effective_user.id
    
    # Create or get user
    User.get_or_create(user_id)
    
    welcome_message = """
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏!**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Jira-—Å—Å—ã–ª–æ–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

**1. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏:**
`task_name –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π` - –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É
`https://jira.example.com/browse/TASK-123 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π` - Jira –∑–∞–¥–∞—á–∞

**2. –° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏:**
`14:00 task_name –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π` - –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É –≤ 14:00
`14_00 task_name` - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

**3. –ö–Ω–æ–ø–∫–∏:**
‚Ä¢ **–û—Ç–¥—ã—Ö** - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–∞—Ç—å –æ—Ç–¥—ã—Ö
‚Ä¢ **–°–≤–æ–¥–∫–∞** - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å

**4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
`/set_timezone Europe/Moscow` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
`/set_workday 09:00 18:00` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `coding –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`
‚Ä¢ `meeting –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã`
‚Ä¢ `https://jira.company.com/browse/TASK-123 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏`
‚Ä¢ `14:30 review –∫–æ–¥-—Ä–µ–≤—å—é PR#456`

–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöÄ
    """
    
    await update.message.reply_text(
        welcome_message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

async def set_timezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /set_timezone command"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`/set_timezone Europe/Moscow`\n"
            "`/set_timezone America/New_York`\n"
            "`/set_timezone Asia/Tokyo`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    timezone = context.args[0]
    
    if user.update_timezone(timezone):
        local_time = user.get_local_time()
        await update.message.reply_text(
            f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{timezone}`\n"
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{local_time.strftime('%H:%M')}`",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `Europe/Moscow`, `America/New_York`",
            parse_mode=ParseMode.MARKDOWN
        )

async def set_workday_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /set_workday command"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n"
            "`/set_workday 09:00 18:00`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        start_str, end_str = context.args
        start_time = datetime.strptime(start_str, "%H:%M").time()
        end_time = datetime.strptime(end_str, "%H:%M").time()
        
        if user.update_workday(start_time, end_time):
            await update.message.reply_text(
                f"‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{start_str} - {end_str}`",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `09:00 18:00`",
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_rest_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle '–û—Ç–¥—ã—Ö' button press"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    # End current active task if exists
    active_task = Task.get_active_task(user_id)
    if active_task:
        active_task.end_task()
        duration = active_task.get_duration()
        task_display = format_task_for_display(active_task.task_name)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ {task_display} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    # Start rest task
    rest_task = Task.create(
        user_id=user_id,
        task_name="–æ—Ç–¥—ã—Ö",
        is_rest=True
    )
    
    await update.message.reply_text(
        "üò¥ –ù–∞—á–∞—Ç –æ—Ç–¥—ã—Ö\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        reply_markup=get_main_keyboard()
    )

async def handle_summary_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle '–°–≤–æ–¥–∫–∞' button press"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    # Get current local date
    now_local = user.get_local_time()
    
    # Get active task
    active_task = Task.get_active_task(user_id)
    
    # Get all tasks for today
    today_tasks = Task.get_tasks_for_date(user_id, now_local)
    
    summary_text = f"üìä **–°–≤–æ–¥–∫–∞ –∑–∞ {now_local.strftime('%d.%m.%Y')}**\n\n"
    
    # Current active task
    if active_task:
        duration = active_task.get_duration()
        task_display = format_task_for_display(active_task.task_name)
        start_time = format_time_for_user(active_task.start_time, user)
        
        summary_text += f"üîÑ **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:**\n"
        summary_text += f"{task_display}\n"
        summary_text += f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time}\n"
        summary_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}\n\n"
    else:
        summary_text += "üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏\n\n"
    
    # Today's tasks summary
    if today_tasks:
        summary_text += "üìù **–ó–∞–¥–∞—á–∏ –∑–∞ –¥–µ–Ω—å:**\n\n"
        
        # Group tasks by name
        task_groups = {}
        for task in today_tasks:
            if task.task_name not in task_groups:
                task_groups[task.task_name] = []
            task_groups[task.task_name].append(task)
        
        for task_name, tasks in task_groups.items():
            # Calculate total duration for this task
            total_duration = timedelta()
            for task in tasks:
                total_duration += task.get_duration()
            
            task_display = format_task_for_display(task_name)
            summary_text += f"‚Ä¢ {task_display} ‚Äî {format_duration(total_duration)}\n"
            
            # Get unique comments for this task
            unique_comments = get_unique_comments(tasks)
            for comment in unique_comments:
                summary_text += f"  ‚îî {comment}\n"
            
            summary_text += "\n"
        
        # Calculate total work time
        total_work_time = timedelta()
        for task in today_tasks:
            if not task.is_rest:
                total_work_time += task.get_duration()
        
        summary_text += f"‚è±Ô∏è **–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {format_duration(total_work_time)}\n"
    else:
        summary_text += "üìù –ó–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await update.message.reply_text(
        summary_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

async def handle_help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle '–ü–æ–º–æ—â—å' button press"""
    help_text = """
üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/set_timezone <—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å>` ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
  –ü—Ä–∏–º–µ—Ä: `/set_timezone Europe/Moscow`
‚Ä¢ `/set_workday <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü>` ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
  –ü—Ä–∏–º–µ—Ä: `/set_workday 09:00 18:00`

**–ö–Ω–æ–ø–∫–∏:**
‚Ä¢ **–û—Ç–¥—ã—Ö** ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–∞—Ç—å –æ—Ç–¥—ã—Ö
‚Ä¢ **–°–≤–æ–¥–∫–∞** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å –∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
‚Ä¢ **–ü–æ–º–æ—â—å** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

**–¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–¥–∞—á:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Jira-—Å—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞)
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: `14:00 –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å: `–ó–∞–¥–∞—á–∞ - –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—á–∏`
‚Ä¢ `14:30 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞`
‚Ä¢ `https://company.atlassian.net/browse/PROJ-123`
‚Ä¢ `–°–æ–≤–µ—â–∞–Ω–∏–µ - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤`

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ó–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –º–∏—Ä–∞

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å, –∏ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç!
"""
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

async def handle_task_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle task messages"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    message_text = update.message.text.strip()
    
    # Parse time from message if present
    specified_time, remaining_message = parse_time_from_message(message_text)
    
    # Parse task name and comment
    task_name, comment, is_jira = parse_task_message(remaining_message)
    
    # Determine start time
    if specified_time:
        start_time = create_datetime_from_time(user, specified_time)
    else:
        start_time = datetime.utcnow()
    
    # Check if there's an active task with the same time (for overwriting)
    active_task = Task.get_active_task(user_id)
    should_overwrite = False
    
    if active_task and specified_time:
        active_start_local = user.get_local_time(active_task.start_time)
        new_start_local = user.get_local_time(start_time)
        
        # If times are the same (within same minute), overwrite
        if (active_start_local.replace(second=0, microsecond=0) == 
            new_start_local.replace(second=0, microsecond=0)):
            should_overwrite = True
    
    if should_overwrite:
        # Update existing task
        active_task.update_with_same_time(task_name, comment)
        task_display = format_task_for_display(task_name, is_jira)
        
        await update.message.reply_text(
            f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {task_display}\n"
            f"‚è∞ –í—Ä–µ–º—è: {format_time_for_user(start_time, user)}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    else:
        # End current active task if exists
        if active_task:
            active_task.end_task(start_time)
            duration = active_task.get_duration()
            old_task_display = format_task_for_display(active_task.task_name)
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {old_task_display}\n"
                f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}",
                parse_mode=ParseMode.MARKDOWN
            )
        
        # Create new task
        new_task = Task.create(
            user_id=user_id,
            task_name=task_name,
            comment=comment,
            start_time=start_time,
            is_rest=False
        )
        
        task_display = format_task_for_display(task_name, is_jira)
        start_time_str = format_time_for_user(start_time, user)
        
        response_text = f"üöÄ –ù–∞—á–∞—Ç–∞ –∑–∞–¥–∞—á–∞: {task_display}\n‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time_str}"
        
        if comment:
            response_text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        
        await update.message.reply_text(
            response_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )

async def auto_end_tasks_job(context: ContextTypes.DEFAULT_TYPE):
    """Background job to auto-end tasks that exceed workday"""
    try:
        from models import User, Task
        from database import get_db
        
        # Get all users with active tasks
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT DISTINCT u.user_id, u.timezone, u.workday_start, u.workday_end
                FROM users u
                JOIN tasks t ON u.user_id = t.user_id
                WHERE t.end_time IS NULL
            """)
            
            users_with_active_tasks = cursor.fetchall()
        
        for user_data in users_with_active_tasks:
            user = User(
                user_id=user_data['user_id'],
                timezone=user_data['timezone'],
                workday_start=user_data['workday_start'],
                workday_end=user_data['workday_end']
            )
            
            active_task = Task.get_active_task(user.user_id)
            if active_task:
                # Ensure start_time is timezone-aware
                start_time = active_task.start_time
                if start_time.tzinfo is None:
                    start_time = pytz.utc.localize(start_time)
                
                should_end, end_time = should_auto_end_task(user, start_time)
                
                if should_end and end_time:
                    active_task.end_task(end_time)
                    
                    # Send notification to user
                    duration = active_task.get_duration()
                    task_display = format_task_for_display(active_task.task_name)
                    
                    message = (
                        f"‚è∞ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_display}\n"
                        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}\n"
                        f"üîî –ü—Ä–∏—á–∏–Ω–∞: –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"
                    )
                    
                    await context.bot.send_message(
                        chat_id=user.user_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=get_main_keyboard()
                    )
                    
                    logger.info(f"Auto-ended task for user {user.user_id}")
    
    except Exception as e:
        logger.error(f"Error in auto_end_tasks_job: {e}")
