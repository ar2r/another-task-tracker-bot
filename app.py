import os
import logging
import threading
import time as time_module
from datetime import datetime, time, timedelta

# Import Telegram bot
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# Import Flask web server
from flask import Flask, jsonify

# Import bot modules
from database import init_database
from models import User, Task
from task_parser import parse_task_message, format_task_for_display
from time_utils import format_duration, format_time_for_user, create_datetime_from_time, parse_time_from_message
import pytz

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Global status tracking
app_status = {
    'bot_running': False,
    'web_server_running': False,
    'start_time': datetime.now(),
    'last_activity': datetime.now()
}

# Flask app for health checks
app = Flask(__name__)

@app.route('/')
def health_check():
    """Root health check endpoint required for deployment"""
    return jsonify({
        'status': 'healthy',
        'service': 'telegram-time-tracking-bot',
        'timestamp': datetime.now().isoformat(),
        'bot_running': app_status['bot_running'],
        'web_server_running': app_status['web_server_running'],
        'uptime_seconds': (datetime.now() - app_status['start_time']).total_seconds()
    })

@app.route('/health')
def health():
    """Additional health endpoint"""
    return health_check()

@app.route('/status')
def status():
    """Detailed status endpoint"""
    return jsonify({
        'app_status': app_status,
        'environment': {
            'bot_token_configured': bool(os.environ.get('BOT_TOKEN')),
            'database_url_configured': bool(os.environ.get('DATABASE_URL')),
        },
        'timestamp': datetime.now().isoformat()
    })

# Telegram Bot Setup
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

def log_user_request(message, action_type="message"):
    """Log user requests"""
    user = message.from_user
    user_info = f"@{user.username}" if user.username else f"ID:{user.id}"
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    if full_name:
        user_info += f" ({full_name})"
    
    message_text = message.text if hasattr(message, 'text') and message.text else "N/A"
    if len(message_text) > 100:
        message_text = message_text[:100] + "..."
    
    logger.info(f"üì® {action_type.upper()} –æ—Ç {user_info}: '{message_text}'")
    app_status['last_activity'] = datetime.now()

def get_main_keyboard():
    """Get main keyboard with buttons"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üèñÔ∏è –û—Ç–¥—ã—Ö"), KeyboardButton("üìä –°–≤–æ–¥–∫–∞"))
    keyboard.row(KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    return keyboard

@bot.message_handler(commands=['start'])
def start_command(message):
    """Handle /start command"""
    log_user_request(message, "command")
    user_id = message.from_user.id
    
    # Create or get user
    user = User.get_or_create(user_id)
    
    welcome_message = f"""
üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏.

*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Jira (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —Ç–∏–∫–µ—Ç–æ–≤)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

*–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `/set_timezone Europe/Moscow`
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: `/set_workday 09:00 18:00`
3. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}
‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {user.workday_start.strftime('%H:%M')} - {user.workday_end.strftime('%H:%M')}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
"""
    
    bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown', reply_markup=get_main_keyboard())

@bot.message_handler(commands=['set_timezone'])
def set_timezone_command(message):
    """Handle /set_timezone command"""
    log_user_request(message, "command")
    user_id = message.from_user.id
    
    try:
        # Extract timezone from command
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_timezone Europe/Moscow`", 
                           parse_mode='Markdown')
            return
        
        timezone_str = parts[1]
        user = User.get_or_create(user_id)
        
        if user.update_timezone(timezone_str):
            bot.send_message(message.chat.id, 
                           f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_str}")
        else:
            bot.send_message(message.chat.id, 
                           f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}\n\n" +
                           "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:\n" +
                           "‚Ä¢ Europe/Moscow\n‚Ä¢ Europe/London\n‚Ä¢ America/New_York\n‚Ä¢ Asia/Tokyo")
    except Exception as e:
        logger.error(f"Error in set_timezone: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")

@bot.message_handler(commands=['set_workday'])
def set_workday_command(message):
    """Handle /set_workday command"""
    log_user_request(message, "command")
    user_id = message.from_user.id
    
    try:
        # Extract workday hours from command
        parts = message.text.split()
        if len(parts) != 3:
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_workday 09:00 18:00`", 
                           parse_mode='Markdown')
            return
        
        start_str, end_str = parts[1], parts[2]
        
        # Parse times
        try:
            start_time = datetime.strptime(start_str, '%H:%M').time()
            end_time = datetime.strptime(end_str, '%H:%M').time()
        except ValueError:
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
            return
        
        user = User.get_or_create(user_id)
        
        if user.update_workday(start_time, end_time):
            bot.send_message(message.chat.id, 
                           f"‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_str} - {end_str}")
        else:
            bot.send_message(message.chat.id, 
                           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    except Exception as e:
        logger.error(f"Error in set_workday: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

@bot.message_handler(func=lambda message: message.text == "üèñÔ∏è –û—Ç–¥—ã—Ö")
def handle_rest_button(message):
    """Handle '–û—Ç–¥—ã—Ö' button press"""
    log_user_request(message, "button")
    user_id = message.from_user.id
    
    try:
        # Check if there's an active task
        current_task = Task.get_active_task(user_id)
        if current_task:
            # End current task
            current_task.end_task()
            logger.info(f"Task ended for user {user_id}: {current_task.task_name}")
        
        # Create rest task
        user = User.get_or_create(user_id)
        now_utc = datetime.now(pytz.UTC)
        
        rest_task = Task.create(
            user_id=user_id,
            task_name="–û—Ç–¥—ã—Ö",
            comment="–ü–µ—Ä–µ—Ä—ã–≤ –≤ —Ä–∞–±–æ—Ç–µ",
            start_time=now_utc,
            is_rest=True
        )
        
        bot.send_message(message.chat.id, 
                       f"üèñÔ∏è –û—Ç–¥—ã—Ö –Ω–∞—á–∞—Ç –≤ {format_time_for_user(now_utc, user)}\n\n" +
                       "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–¥—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.",
                       reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_rest_button: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–¥—ã—Ö–∞")

@bot.message_handler(func=lambda message: message.text == "üìä –°–≤–æ–¥–∫–∞")
def handle_summary_button(message):
    """Handle '–°–≤–æ–¥–∫–∞' button press"""
    log_user_request(message, "button")
    user_id = message.from_user.id
    
    try:
        user = User.get_or_create(user_id)
        
        # Get today's date in user's timezone
        user_now = user.get_local_time()
        today = user_now.date()
        
        # Get all tasks for today
        tasks = Task.get_tasks_for_date(user_id, user_now)
        
        if not tasks:
            bot.send_message(message.chat.id, 
                           f"üìä *–°–≤–æ–¥–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}*\n\n" +
                           "‚ùå –ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                           parse_mode='Markdown')
            return
        
        # Calculate statistics
        total_work_time = timedelta()
        total_rest_time = timedelta()
        work_tasks = []
        rest_tasks = []
        
        for task in tasks:
            task_duration = task.get_duration()
            if task.is_rest:
                total_rest_time += task_duration
                rest_tasks.append(task)
            else:
                total_work_time += task_duration
                work_tasks.append(task)
        
        # Format summary
        summary = f"üìä *–°–≤–æ–¥–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}*\n\n"
        
        # Work time summary
        summary += f"‚è∞ *–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:* {format_duration(total_work_time)}\n"
        summary += f"üèñÔ∏è *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞:* {format_duration(total_rest_time)}\n"
        summary += f"üìà *–û–±—â–µ–µ –≤—Ä–µ–º—è:* {format_duration(total_work_time + total_rest_time)}\n\n"
        
        # Work tasks details
        if work_tasks:
            summary += "*üîß –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏:*\n"
            for task in work_tasks:
                start_time = format_time_for_user(task.start_time, user)
                end_time = format_time_for_user(task.end_time, user) if task.end_time else "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                duration = format_duration(task.get_duration())
                
                task_display = format_task_for_display(task.task_name, original_message=task.original_message)
                summary += f"‚Ä¢ {task_display}\n"
                summary += f"  ‚è∞ {start_time} - {end_time} ({duration})\n"
                if task.comment:
                    summary += f"  üí¨ {task.comment}\n"
                summary += "\n"
        
        # Rest periods
        if rest_tasks:
            summary += "*üèñÔ∏è –ü–µ—Ä–∏–æ–¥—ã –æ—Ç–¥—ã—Ö–∞:*\n"
            for task in rest_tasks:
                start_time = format_time_for_user(task.start_time, user)
                end_time = format_time_for_user(task.end_time, user) if task.end_time else "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
                duration = format_duration(task.get_duration())
                summary += f"‚Ä¢ {start_time} - {end_time} ({duration})\n"
        
        bot.send_message(message.chat.id, summary, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in handle_summary_button: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")

@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def handle_help_button(message):
    """Handle '–ü–æ–º–æ—â—å' button press"""
    log_user_request(message, "button")
    
    help_text = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ `/set_timezone Europe/Moscow` - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
‚Ä¢ `/set_workday 09:00 18:00` - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤

*üî• –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
‚Ä¢ üèñÔ∏è *–û—Ç–¥—ã—Ö* - –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
‚Ä¢ üìä *–°–≤–æ–¥–∫–∞* - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
‚Ä¢ ‚ùì *–ü–æ–º–æ—â—å* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏:
‚Ä¢ `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞`
‚Ä¢ `–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π`
‚Ä¢ `–ö–æ–¥-—Ä–µ–≤—å—é`

*üïê –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:*
‚Ä¢ `14:30 –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞` - –ó–∞–¥–∞—á–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
‚Ä¢ `14_30 –ö–æ–¥-—Ä–µ–≤—å—é` - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

*üîó Jira –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*
‚Ä¢ `PROJ-123 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞` - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
‚Ä¢ `https://jira.company.com/browse/TASK-456` - –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞

*üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–∞–º:*
‚Ä¢ `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã`
‚Ä¢ `–í—Å—Ç—Ä–µ—á–∞ - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –Ω–∞ —Å–ø—Ä–∏–Ω—Ç`

*ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è

*üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
‚Ä¢ –°–≤–æ–¥–∫–∏ –∑–∞ –¥–µ–Ω—å —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
    
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_task_message(message):
    """Handle task messages"""
    log_user_request(message, "task")
    user_id = message.from_user.id
    
    try:
        # Parse task message
        task_name, comment, is_jira = parse_task_message(message.text)
        
        if not task_name:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            return
        
        user = User.get_or_create(user_id)
        
        # Parse time from message
        parsed_time, remaining_message = parse_time_from_message(message.text)
        
        if parsed_time:
            # Use specified time
            start_time = create_datetime_from_time(user, parsed_time)
        else:
            # Use current time
            start_time = datetime.now(pytz.UTC)
        
        # Check for active task
        current_task = Task.get_active_task(user_id)
        
        # Check if it's the same task at the same time (update scenario)
        if current_task and current_task.task_name == task_name:
            # Check if start time is very close (within 1 minute)
            current_start = current_task.start_time
            if current_start.tzinfo is None:
                current_start = pytz.UTC.localize(current_start)
            if start_time.tzinfo is None:
                start_time = pytz.UTC.localize(start_time)
            
            time_diff = abs((start_time - current_start).total_seconds())
            if time_diff <= 60:  # Within 1 minute
                # Update existing task
                if current_task.update_with_same_time(task_name, comment, message.text):
                    formatted_task = format_task_for_display(task_name, is_jira, message.text)
                    bot.send_message(message.chat.id, 
                                   f"‚úèÔ∏è *–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:*\n{formatted_task}\n\n" +
                                   f"üïê –í—Ä–µ–º—è: {format_time_for_user(start_time, user)}" +
                                   (f"\nüí¨ {comment}" if comment else ""),
                                   parse_mode='Markdown',
                                   reply_markup=get_main_keyboard())
                    return
        
        # End current task if exists
        if current_task:
            current_task.end_task(start_time)
            logger.info(f"Previous task ended for user {user_id}: {current_task.task_name}")
        
        # Create new task
        new_task = Task.create(
            user_id=user_id,
            task_name=task_name,
            comment=comment,
            start_time=start_time,
            is_rest=False,
            original_message=message.text
        )
        
        # Send confirmation
        formatted_task = format_task_for_display(task_name, is_jira, message.text)
        confirmation_message = f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:*\n{formatted_task}\n\n" + \
                             f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {format_time_for_user(start_time, user)}"
        
        if comment:
            confirmation_message += f"\nüí¨ {comment}"
        
        bot.send_message(message.chat.id, confirmation_message, 
                       parse_mode='Markdown', reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_task_message: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

def run_telegram_bot():
    """Run the Telegram bot"""
    try:
        logger.info("Starting Telegram bot...")
        app_status['bot_running'] = True
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Telegram bot error: {e}")
        app_status['bot_running'] = False

def run_web_server():
    """Run the web server"""
    try:
        port = int(os.environ.get('PORT', 5000))
        logger.info(f"Starting web server on port {port}")
        app_status['web_server_running'] = True
        app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        logger.error(f"Web server error: {e}")
        app_status['web_server_running'] = False

def main():
    """Main function"""
    logger.info("Initializing database...")
    init_database()
    logger.info("Database initialized successfully")
    
    # Start web server in a separate thread
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    # Give web server time to start
    time_module.sleep(2)
    
    # Start Telegram bot in main thread
    run_telegram_bot()

if __name__ == "__main__":
    main()