from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from telegram.ext import CallbackContext
from datetime import datetime, time, timedelta
import pytz
import logging
from models import User, Task
from task_parser import parse_task_message, format_task_for_display, get_unique_comments
from time_utils import (
    parse_time_from_message, format_duration, 
    should_auto_end_task, format_time_for_user,
    create_datetime_from_time
)

logger = logging.getLogger(__name__)

def get_main_keyboard():
    """Get main keyboard with buttons"""
    keyboard = [
        [KeyboardButton("üèñÔ∏è –û—Ç–¥—ã—Ö"), KeyboardButton("üìä –°–≤–æ–¥–∫–∞")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def start_command(update: Update, context: CallbackContext):
    """Handle /start command"""
    user_id = update.effective_user.id
    
    # Create or get user
    user = User.get_or_create(user_id)
    
    message = f"""
üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏.

*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Jira (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —Ç–∏–∫–µ—Ç–æ–≤)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

*–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `/set_timezone Europe/Moscow`
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: `/set_workday 09:00 18:00`
3. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{user.timezone}`
‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: `{user.workday_start.strftime('%H:%M')} - {user.workday_end.strftime('%H:%M')}`

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
    """
    
    # Send welcome message
    update.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_keyboard()
    )

def set_timezone_command(update: Update, context: CallbackContext):
    """Handle /set_timezone command"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    if not context.args:
        message = f"""
‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞*

–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{user.timezone}`

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
`/set_timezone Europe/Moscow`
`/set_timezone America/New_York`
`/set_timezone Asia/Tokyo`

–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:
‚Ä¢ Europe/Moscow (UTC+3)
‚Ä¢ Europe/London (UTC+0)
‚Ä¢ America/New_York (UTC-5)
‚Ä¢ America/Los_Angeles (UTC-8)
‚Ä¢ Asia/Tokyo (UTC+9)
        """
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        return
    
    timezone = context.args[0]
    
    if user.update_timezone(timezone):
        current_time = user.get_local_time()
        message = f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{timezone}`\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{current_time.strftime('%H:%M %d.%m.%Y')}`"
    else:
        message = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{timezone}`\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def set_workday_command(update: Update, context: CallbackContext):
    """Handle /set_workday command"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    if not context.args or len(context.args) != 2:
        message = f"""
üïê *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏*

–¢–µ–∫—É—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: `{user.workday_start.strftime('%H:%M')} - {user.workday_end.strftime('%H:%M')}`

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
`/set_workday 09:00 18:00`
`/set_workday 10:30 19:30`

–ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.
        """
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        return
    
    try:
        start_str, end_str = context.args[0], context.args[1]
        start_time = datetime.strptime(start_str, '%H:%M').time()
        end_time = datetime.strptime(end_str, '%H:%M').time()
        
        if user.update_workday(start_time, end_time):
            message = f"‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ: `{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}`"
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    except ValueError:
        message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 18:00)"
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def handle_rest_button(update: Update, context: CallbackContext):
    """Handle '–û—Ç–¥—ã—Ö' button press"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    # End current task
    current_task = Task.get_active_task(user_id)
    if current_task:
        current_task.end_task()
    
    # Start rest task
    rest_task = Task.create(user_id, "üèñÔ∏è –û—Ç–¥—ã—Ö", is_rest=True)
    
    if current_task:
        duration = current_task.get_duration()
        previous_message = f"–ó–∞–¥–∞—á–∞ **{format_task_for_display(current_task.task_name)}** –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)})"
    else:
        previous_message = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –±—ã–ª–æ"
    
    message = f"""
üèñÔ∏è *–ù–∞—á–∞—Ç –æ—Ç–¥—ã—Ö*

{previous_message}

–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞: `{format_time_for_user(rest_task.start_time, user)}`

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≤–æ–¥–∫–∞" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard())

def handle_summary_button(update: Update, context: CallbackContext):
    """Handle '–°–≤–æ–¥–∫–∞' button press"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    
    # Get today's date in user's timezone
    today = user.get_local_time().replace(hour=0, minute=0, second=0, microsecond=0)
    
    # Get all tasks for today
    tasks = Task.get_tasks_for_date(user_id, today)
    
    if not tasks:
        message = f"""
üìä *–°–≤–æ–¥–∫–∞ –∑–∞ {today.strftime('%d %B %Y')}*

–ó–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!
        """
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard())
        return
    
    # Get current task
    current_task = Task.get_active_task(user_id)
    
    # Build summary
    message_parts = [f"üìä *–°–≤–æ–¥–∫–∞ –∑–∞ {today.strftime('%d %B %Y')}*"]
    
    if current_task:
        current_duration = current_task.get_duration()
        current_display = format_task_for_display(current_task.task_name, current_task.task_name.startswith(('PROJ-', 'TASK-', 'DEV-', 'BUG-')))
        message_parts.append(f"\nüîÑ *–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:*")
        message_parts.append(f"**{current_display}** (–Ω–∞—á–∞—Ç–∞ –≤ {format_time_for_user(current_task.start_time, user)}, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {format_duration(current_duration)})")
    
    # Group tasks by name and calculate totals
    task_groups = {}
    total_work_time = timedelta()
    
    for task in tasks:
        duration = task.get_duration()
        
        if not task.is_rest:
            total_work_time += duration
        
        if task.task_name in task_groups:
            task_groups[task.task_name]['duration'] += duration
            task_groups[task.task_name]['tasks'].append(task)
        else:
            task_groups[task.task_name] = {
                'duration': duration,
                'tasks': [task],
                'is_rest': task.is_rest
            }
    
    # Add tasks list
    message_parts.append(f"\nüìã *–ó–∞–¥–∞—á–∏ –∑–∞ –¥–µ–Ω—å:*")
    
    for task_name, group in task_groups.items():
        duration_str = format_duration(group['duration'])
        task_display = format_task_for_display(task_name)
        
        if group['is_rest']:
            message_parts.append(f"‚Ä¢ **{task_display}** ‚Äî {duration_str}")
        else:
            if task_name == current_task.task_name if current_task else False:
                message_parts.append(f"‚Ä¢ **{task_display}** ‚Äî {duration_str} (—Ç–µ–∫—É—â–∞—è)")
            else:
                message_parts.append(f"‚Ä¢ **{task_display}** ‚Äî {duration_str}")
    
    # Add total work time
    if total_work_time.total_seconds() > 0:
        message_parts.append(f"\n‚è±Ô∏è *–û–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:* {format_duration(total_work_time)}")
    
    # Add unique comments
    all_comments = []
    for task in tasks:
        if task.comment:
            all_comments.append(task.comment)
    
    unique_comments = list(set(all_comments))
    if unique_comments:
        message_parts.append(f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:*")
        for comment in unique_comments[:5]:  # Limit to 5 comments to avoid long messages
            message_parts.append(f"‚Ä¢ {comment}")
    
    message = "\n".join(message_parts)
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard())

def handle_help_button(update: Update, context: CallbackContext):
    """Handle '–ü–æ–º–æ—â—å' button press"""
    message = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/set_timezone <timezone>` ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ `/set_workday <start> <end>` ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

*üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*
‚Ä¢ `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏` ‚Äî –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ `14:30 –ü–ª–∞–Ω–µ—Ä–∫–∞` ‚Äî –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ `–ö–æ–¥-—Ä–µ–≤—å—é - –ø—Ä–æ–≤–µ—Ä–∫–∞ PR` ‚Äî –∑–∞–¥–∞—á–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º

*üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Jira:*
‚Ä¢ `https://jira.company.com/PROJ-123`
‚Ä¢ `TASK-456 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞`
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤

*üéõÔ∏è –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*
‚Ä¢ **üèñÔ∏è –û—Ç–¥—ã—Ö** ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
‚Ä¢ **üìä –°–≤–æ–¥–∫–∞** ‚Äî –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
‚Ä¢ **‚ùì –ü–æ–º–æ—â—å** ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –æ—Ç—á–µ—Ç–∞—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã

*üí° –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `14:30` –∏–ª–∏ `14_30`
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∏—Ä–µ –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
‚Ä¢ –ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π
‚Ä¢ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–≤–æ–¥–∫–∞—Ö
    """
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard())

def handle_task_message(update: Update, context: CallbackContext):
    """Handle task messages"""
    user_id = update.effective_user.id
    user = User.get_or_create(user_id)
    message_text = update.message.text
    
    # Parse task message
    task_name, comment, is_jira = parse_task_message(message_text)
    
    if not task_name:
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Parse time from message
    specified_time, remaining_message = parse_time_from_message(message_text)
    
    # Get current task to end it
    current_task = Task.get_active_task(user_id)
    
    # Determine start time
    if specified_time:
        # Create datetime from specified time
        try:
            start_time = create_datetime_from_time(user, specified_time)
        except Exception:
            start_time = user.get_utc_time(user.get_local_time())
    else:
        start_time = user.get_utc_time(user.get_local_time())
    
    # Check if this is the same task at the same time (update scenario)
    if current_task and current_task.task_name == task_name:
        # Check if start time is very close (within 1 minute)
        time_diff = abs((start_time - current_task.start_time).total_seconds())
        if time_diff < 60:
            # Update existing task
            if current_task.update_with_same_time(task_name, comment):
                task_display = format_task_for_display(task_name, is_jira)
                message = f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ **{task_display}** –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                if comment:
                    message += f" —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: _{comment}_"
                
                update.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_main_keyboard()
                )
                return
    
    # End current task if exists
    if current_task:
        current_task.end_task()
        previous_duration = current_task.get_duration()
        previous_display = format_task_for_display(current_task.task_name)
        previous_info = f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ **{previous_display}** –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(previous_duration)})\n\n"
    else:
        previous_info = ""
    
    # Create new task
    new_task = Task.create(user_id, task_name, comment, start_time)
    
    if new_task:
        task_display = format_task_for_display(task_name, is_jira)
        start_time_str = format_time_for_user(start_time, user)
        
        message = f"{previous_info}‚úÖ –ù–∞—á–∞—Ç–∞ –∑–∞–¥–∞—á–∞ **{task_display}**"
        
        if comment:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: _{comment}_"
        
        if specified_time:
            message += f"\n‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: `{start_time_str}`"
        else:
            message += f"\n‚è∞ –ù–∞—á–∞—Ç–∞ –≤: `{start_time_str}`"
        
        update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    else:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )

def auto_end_tasks_job(context: CallbackContext):
    """Background job to auto-end tasks that exceed workday"""
    logger.info("Running auto-end tasks job")
    
    try:
        # Get all users with active tasks (this would need to be implemented in models)
        # For now, we'll handle this differently since we don't have a way to get all users
        # This is a simplified version - in production you'd query all users
        pass
        
    except Exception as e:
        logger.error(f"Error in auto_end_tasks_job: {e}")